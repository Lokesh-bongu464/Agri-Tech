const mongoose = require("mongoose");
const bcrypt = require("bcryptjs"); // For password hashing

const UserSchema = new mongoose.Schema(
  {
    name: {
      type: String,
      required: true,
      trim: true,
    },
    email: {
      type: String,
      required: true,
      unique: true,
      lowercase: true,
      trim: true,
      match: [/.+@.+\..+/, "Please fill a valid email address"],
    },
    password: {
      type: String,
      required: true,
      minlength: 6,
    },
    role: {
      // Added role for future access control (e.g., 'user', 'admin')
      type: String,
      enum: ["user", "admin"], // Enforce specific roles
      default: "user",
    },
    // The original userId field in your UserSchema seems self-referential or redundant.
    // If a user has a parent user, it's a different relationship.
    // For a standard user model, userId is typically the _id generated by MongoDB.
    // I'm removing it for now as it's not standard for a top-level user schema.
    // If you intended for users to have a 'referrer' or similar, we can re-add it with a clear purpose.
  },
  {
    timestamps: true,
  }
);

// Pre-save hook to hash password before saving
UserSchema.pre("save", async function (next) {
  if (!this.isModified("password")) {
    // Only hash if the password has been modified
    return next();
  }
  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
  next();
});

// Method to compare entered password with hashed password
UserSchema.methods.matchPassword = async function (enteredPassword) {
  return await bcrypt.compare(enteredPassword, this.password);
};

module.exports = mongoose.model("User", UserSchema);
